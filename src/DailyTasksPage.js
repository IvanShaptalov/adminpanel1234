import React, { useState, useEffect } from 'react';
import { BACKEND_SERVER_URL } from './config';
import { v4 as uuidv4 } from 'uuid';
import './DailyTasksPage.css';

const DailyTasksPage = () => {
    const [tasks, setTasks] = useState([]);
    const [dailyTasks, setDailyTasks] = useState([]);
    const [limit, setLimit] = useState(50);
    const [editingTaskId, setEditingTaskId] = useState(null);
    const [editedTask, setEditedTask] = useState({});
    const [newTask, setNewTask] = useState({
        id: uuidv4(), // Generate a unique ID using uuid
        title: '',
        description: '',
        reward_points_per_user: 0,
        task_link: '',
        community_id: '31764', // ID placeholder, will be autogenerated
        is_daily_task: true,
        task_pool_points: 200000000000000,
        task_cost_points: 199999999996000,
        start_date: new Date().toISOString(),
        task_in_days: 10,
        expired: false,
        is_approved: true
    });

    useEffect(() => {
        const fetchTasks = async () => {
            const token = localStorage.getItem('admin_token');
            if (!token) {
                console.error('No admin token found');
                return;
            }

            const myHeaders = new Headers();
            myHeaders.append("Authorization", `Bearer ${token}`);

            const requestOptions = {
                method: 'GET',
                headers: myHeaders,
                redirect: 'follow'
            };

            try {
                const response = await fetch(`${BACKEND_SERVER_URL}/admin/tasks/all?limit=${limit}`, requestOptions);
                if (!response.ok) {
                    console.error('Error fetching tasks:', response.statusText);
                    return;
                }

                const result = await response.json();
                setTasks(result || []);
                const filteredDailyTasks = (result || []).filter(task => task.is_daily_task === true);
                setDailyTasks(filteredDailyTasks);
            } catch (error) {
                console.error('Error fetching tasks:', error);
            }
        };

        fetchTasks();
    }, [limit]);

    const handleLimitChange = (e) => {
        setLimit(Number(e.target.value));
    };

    const deleteTask = async (taskId) => {
        const token = localStorage.getItem('admin_token');
        if (!token) {
            console.error('No admin token found');
            return;
        }

        const myHeaders = new Headers();
        myHeaders.append("Authorization", `Bearer ${token}`);

        const requestOptions = {
            method: 'DELETE',
            headers: myHeaders,
            redirect: 'follow'
        };

        try {
            const response = await fetch(`${BACKEND_SERVER_URL}/admin/tasks/delete/${taskId}`, requestOptions);
            if (!response.ok) {
                console.error('Error deleting task:', response.statusText);
                return;
            }
            console.log("Task deleted successfully");
            setDailyTasks(dailyTasks.filter(task => task.id !== taskId));
        } catch (error) {
            console.error('Error deleting task:', error);
        }
    };

    const startEditing = (task) => {
        setEditingTaskId(task.id);
        setEditedTask({ ...task });
    };

    const handleTaskChange = (e) => {
        const { name, value } = e.target;
        setEditedTask(prevTask => ({
            ...prevTask,
            [name]: name === 'is_approved' || name === 'expired' ? e.target.checked : value
        }));
    };

    const saveTaskChanges = async () => {
        const token = localStorage.getItem('admin_token');
        if (!token) {
            console.error('No admin token found');
            return;
        }

        const myHeaders = new Headers();
        myHeaders.append("Authorization", `Bearer ${token}`);
        myHeaders.append("Content-Type", "application/json");

        const requestOptions = {
            method: 'PUT',
            headers: myHeaders,
            body: JSON.stringify(editedTask),
            redirect: 'follow'
        };

        try {
            const response = await fetch(`${BACKEND_SERVER_URL}/admin/tasks/edit/${editedTask.id}`, requestOptions);
            if (!response.ok) {
                console.error('Error updating task:', response.statusText);
                return;
            }
            const result = await response.json();
            console.log("Task updated successfully:", result);
            setEditingTaskId(null);
            setDailyTasks(dailyTasks.map(task => task.id === result.id ? result : task));
        } catch (error) {
            console.error('Error updating task:', error);
        }
    };

    // Function to generate a new task
    const generateCommunityTask = async () => {
        const token = localStorage.getItem('admin_token');
        if (!token) {
            console.error('No admin token found');
            return;
        }

        const myHeaders = new Headers();
        myHeaders.append("Authorization", `Bearer ${token}`);
        myHeaders.append("Content-Type", "application/json");

        // Assign a new unique ID to the task
        const taskWithId = { ...newTask, id: uuidv4() };

        const raw = JSON.stringify(taskWithId);

        const requestOptions = {
            method: 'POST',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
        };

        try {
            const response = await fetch(`${BACKEND_SERVER_URL}/admin/tasks/create`, requestOptions);
            if (!response.ok) {
                console.error('Error creating task:', response.statusText);
                return;
            }
            const result = await response.json();
            console.log("Task created successfully:", result);

            // Add the new task to the state
            setDailyTasks([...dailyTasks, result]);
        } catch (error) {
            console.error('Error creating task:', error);
        }
    };

    // Handle new task form changes
    const handleNewTaskChange = (e) => {
        const { name, value } = e.target;
        setNewTask(prevTask => ({
            ...prevTask,
            [name]: value
        }));
    };

    return (
        <div className="daily-task-page">
            <h2>Daily Tasks</h2>
            <div className="limit-selector">
                <label htmlFor="limit">Show tasks per page: </label>
                <input
                    type="number"
                    id="limit"
                    value={limit}
                    onChange={handleLimitChange}
                    min="1"
                    max="100"
                />
            </div>

            {/* Task Creation Form */}
            <div className="task-creation-form">
                <h3>Create a New Community Task</h3>
                <input
                    type="text"
                    name="title"
                    placeholder="Task Title"
                    value={newTask.title}
                    onChange={handleNewTaskChange}
                />
                <input
                    type="text"
                    name="description"
                    placeholder="Task Description"
                    value={newTask.description}
                    onChange={handleNewTaskChange}
                />
                <input
                    type="number"
                    name="reward_points_per_user"
                    placeholder="Reward Points"
                    value={newTask.reward_points_per_user}
                    onChange={handleNewTaskChange}
                />
                <input
                    type="text"
                    name="task_link"
                    placeholder="Task Link"
                    value={newTask.task_link}
                    onChange={handleNewTaskChange}
                />
                <button onClick={generateCommunityTask}>Generate Community Task</button>
            </div>

            <table className="task-table">
                <thead>
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Reward Points</th>
                    <th>Task Link</th>
                    <th>Task Cost</th>
                    <th>Task Pool</th>
                    <th>Approved</th>
                    <th>Expired</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                {dailyTasks.length > 0 ? (
                    dailyTasks.map(task => (
                        <tr key={task.id}>
                            <td>
                                {editingTaskId === task.id ? (
                                    <input
                                        type="text"
                                        name="title"
                                        value={editedTask.title}
                                        onChange={handleTaskChange}
                                    />
                                ) : task.title}
                            </td>
                            <td>
                                {editingTaskId === task.id ? (
                                    <input
                                        type="text"
                                        name="description"
                                        value={editedTask.description}
                                        onChange={handleTaskChange}
                                    />
                                ) : task.description}
                            </td>
                            <td>
                                {editingTaskId === task.id ? (
                                    <input
                                        type="number"
                                        name="reward_points_per_user"
                                        value={editedTask.reward_points_per_user}
                                        onChange={handleTaskChange}
                                    />
                                ) : task.reward_points_per_user}
                            </td>
                            <td>
                                {editingTaskId === task.id ? (
                                    <input
                                        type="text"
                                        name="task_link"
                                        value={editedTask.task_link}
                                        onChange={handleTaskChange}
                                    />
                                ) : <a href={task.task_link} target="_blank" rel="noopener noreferrer">Task Link</a>}
                            </td>
                            <td>
                                {editingTaskId === task.id ? (
                                    <input
                                        type="number"
                                        name="task_cost_points"
                                        value={editedTask.task_cost_points}
                                        onChange={handleTaskChange}
                                    />
                                ) : task.task_cost_points}
                            </td>
                            <td>
                                {editingTaskId === task.id ? (
                                    <input
                                        type="number"
                                        name="task_pool_points"
                                        value={editedTask.task_pool_points}
                                        onChange={handleTaskChange}
                                    />
                                ) : task.task_pool_points}
                            </td>
                            <td>
                                {editingTaskId === task.id ? (
                                    <input
                                        type="checkbox"
                                        name="is_approved"
                                        checked={editedTask.is_approved}
                                        onChange={handleTaskChange}
                                    />
                                ) : task.is_approved ? "Yes" : "No"}
                            </td>
                            <td>
                                {editingTaskId === task.id ? (
                                    <input
                                        type="checkbox"
                                        name="expired"
                                        checked={editedTask.expired}
                                        onChange={handleTaskChange}
                                    />
                                ) : task.expired ? "Yes" : "No"}
                            </td>
                            <td>
                                {editingTaskId === task.id ? (
                                    <>
                                        <button onClick={saveTaskChanges}>Save</button>
                                        <button onClick={() => setEditingTaskId(null)}>Cancel</button>
                                    </>
                                ) : (
                                    <>
                                        <button onClick={() => startEditing(task)}>Edit</button>
                                        <button onClick={() => deleteTask(task.id)}>Delete</button>
                                    </>
                                )}
                            </td>
                        </tr>
                    ))
                ) : (
                    <tr>
                        <td colSpan="9">No Daily Tasks Available</td>
                    </tr>
                )}
                </tbody>
            </table>
        </div>
    );
};

export default DailyTasksPage;
